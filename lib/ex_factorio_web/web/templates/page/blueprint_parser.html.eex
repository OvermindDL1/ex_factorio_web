<%= form_tag(page_path(@conn, :blueprint_parser), method: :post, csrf_token: true, enforce_utf8: true, multipart: false) %>
  <textarea name="blueprint-string" placeholder="Put blueprint string here..." rows="9" type="text" style="width:100%;" ><%= @blueprint_string %></textarea>
  <button type="submit">Submit</button>
  <button type="submit" name="example-blueprint">Example Blueprint</button>
</form>

<%= if @blueprint_data do %>
<h3>Raw Data</h3>
<div style="max-height:256px;overflow-y:scroll;width:100%;">
  <pre>
    <%= Poison.encode_to_iodata!(@blueprint_data, html_safe: true, pretty: true) %>
  </pre>
</div>
<br />
<% end %>

<%= if @blueprint_icons do %>
<h3>Icons</h3>
<div style="max-height:256px;overflow-y:scroll;width:100%;">
  <pre>
    <%= Poison.encode_to_iodata!(@blueprint_icons, html_safe: true, pretty: true) %>
  </pre>
</div>
<br />
<% end %>

<%= if @blueprint_entities do %>
<h3>Entities</h3>
<div style="max-height:256px;overflow-y:scroll;width:100%;">
  <pre>
    <%= Poison.encode_to_iodata!(@blueprint_entities, html_safe: true, pretty: true) %>
  </pre>
</div>
<%
{minX, minY, maxX, maxY} =
  Enum.reduce(@blueprint_entities, {0, 0, 0, 0}, fn({_, %{position: %{x: x, y: y}}}, {minX, minY, maxX, maxY}) ->
    minX = if(x<minX, do: x, else: minX)
    minY = if(y<minY, do: y, else: minY)
    maxX = if(x>maxX, do: x, else: maxX)
    maxY = if(y>maxY, do: y, else: maxY)
    {minX, minY, maxX, maxY}
  end)

boxX = -1 + (1.1*minX)
boxY = -1 + (1.1*minY)
boxW = 2 + (1.2*(maxX-minX))
boxH = 2 + (1.2*(maxY-minY))

maxSize = 1024

{width, height} = if(boxW>boxH, do: {maxSize, maxSize*(boxH/boxW)}, else: {maxSize*(boxW/boxH), maxSize})
%>
<svg width="<%= width %>" height="<%= height %>" viewBox="<%= "#{boxX} #{boxY} #{boxW} #{boxH}" %>"><%= for {_id, entity} <- @blueprint_entities, pos = entity.position do %>
  <image xlink:href="https://wiki.factorio.com/images/<%= String.capitalize(entity.name) %>.png" x="<%= pos.x - 0.5 %>" y="<%= pos.y - 0.5 %>" height="1px" width="1px" /><%= for %{index: findex, name: fname} <- List.wrap(entity[:filters]), fcount = 1+length(List.wrap(entity[:filters])) do %>
  <image xlink:href="https://wiki.factorio.com/images/<%= String.capitalize(fname) %>.png" x="<%= pos.x - 0.6 + (0.15 * findex) %>" y="<%= pos.y - 0.6 %>" height="<%= 1/fcount %>px" width="<%= 1/fcount %>px" /><% end %><%= for control_behavior <- List.wrap(entity[:control_behavior]) do %><%= for %{signal: %{name: sname}, index: sindex, count: scount} <- List.wrap(control_behavior[:filters]), fcount = 1+length(List.wrap(control_behavior[:filters])) do %>
  <image xlink:href="https://wiki.factorio.com/images/<%= String.capitalize(sname) %>.png" x="<%= pos.x - 0.6 + (0.15 * sindex) %>" y="<%= pos.y - 0.6 + 0.75 %>" height="<%= 1/fcount %>px" width="<%= 1/fcount %>px" /><% end %><%= for %{output_signal: %{name: out}, operation: op, first_signal: in0}=arith <- List.wrap(control_behavior[:arithmetic_conditions]), in1 = List.wrap(arith[:second_signal]) do %>
    <image xlink:href="https://wiki.factorio.com/images/<%= String.capitalize(out) %>.png" x="<%= pos.x + 0.125 %>" y="<%= pos.y - 0.125 %>" height="0.25px" width="0.25px" />
    <image xlink:href="https://wiki.factorio.com/images/<%= String.capitalize(op) %>.png" x="<%= pos.x - 0.125 %>" y="<%= pos.y - 0.125 %>" height="0.25px" width="0.25px" />
    <image xlink:href="https://wiki.factorio.com/images/<%= String.capitalize(in0.name) %>.png" x="<%= pos.x - 0.5 %>" y="<%= pos.y - 0.125 %>" height="0.25px" width="0.25px" /><%= if is_map(in1) do %>
    <image xlink:href="https://wiki.factorio.com/images/<%= String.capitalize(in1.name) %>.png" x="<%= pos.x - 0.35 %>" y="<%= pos.y - 0.125 %>" height="0.25px" width="0.25px" /><% end %><% end %><% end %><% end %>
<%= for %{from_entity_id: from_entity_id, to_entity_id: to_entity_id, color: color, from_circuit_id: from_circuit_id, to_circuit_id: to_circuit_id} <- @blueprint_wires,
    from_entity = @blueprint_entities[from_entity_id],
    to_entity = @blueprint_entities[to_entity_id],
    {cx, cy} = if(color === :red, do: {-0.05, -0.1}, else: {0.05, 0.1}),
    {ofX, ofY} = if(from_circuit_id === 2, do: {cx-0.25, cy-0.1}, else: {cx+0.25, cy+0.1}),
    {otX, otY} = if(to_circuit_id === 2, do: {cx-0.25, cy-0.1}, else: {cx+0.25, cy+0.1}),
    %{x: x1, y: y1} = from_entity.position,
    %{x: x2, y: y2} = to_entity.position do %>
  <path d="M<%= x1+ofX %> <%= y1+ofY %> C<%= x1+ofX+0.15 %> <%= y1+ofY+0.25 %>, <%= x2+otX-0.15 %> <%= y2+otY+0.25 %>, <%= x2+otX %> <%= y2+otY %>" style="stroke:<%= color %>;stroke-width:0.1;fill:none;stroke-linecap:round;" /><% end %>
</svg>

<% end %>
